package com.yotwei.battlecity.game.object;

import com.yotwei.battlecity.game.object.properties.DrawAble;
import com.yotwei.battlecity.game.object.properties.LifeCycle;
import com.yotwei.battlecity.game.object.properties.Physic;

import java.awt.*;

/**
 * Created by YotWei on 2019/2/25.
 */
@SuppressWarnings({"WeakerAccess", "unused"})
public abstract class GameObject
        implements Physic<Rectangle>, LifeCycle, DrawAble {

    private static long idGenerator = 10000L;

    /*
     * a LevelContext reference
     * every game object must associate with a level context
     * it's a final field so it must be assigned at constructor
     */
    private final LevelContext levelContext;

    /*
     * id is a unique long integer for every game object
     * it's generated by increasing long integer
     */
    private long uid;

    /*
     * tag of the object
     */
    private String tag;

    /*
     * a flag to tell if this game object is active
     * the flag is set to true at constructor
     */
    private boolean isActive;

    protected GameObject(LevelContext lvlCtx) {
        levelContext = lvlCtx;

        // unique id generate by increasing long integer
        uid = idGenerator++;
    }


    // ----------------------------------------------------------
    //
    // some getters and setters
    // all of them are not to be overridden
    //
    // ----------------------------------------------------------
    public final long getUID() {
        return uid;
    }

    public final LevelContext getLevelContext() {
        return levelContext;
    }

    public final void setTag(String tagStr) {
        tag = tagStr;
    }

    public final String getTag() {
        return tag;
    }

    public final boolean isActive() {
        return isActive;
    }

    public void setActive(boolean active) {
        if (isActive != active) {
            if (!isActive) {
                onActive();
            } else {
                onInactive();
            }
            isActive = active;
        }
    }


    // ----------------------------------------------------------
    //
    // rewrite hashCode() and equals() method of GameObject
    // uid is a unique long value in GameObject instance
    // it also can be the hash code of an instance of GameObject
    //
    // they're not allow to be overridden
    //
    // ----------------------------------------------------------

    @Override
    public final int hashCode() {
        return (int) uid;
    }

    @Override
    public final boolean equals(Object obj) {
        return obj instanceof GameObject &&
                this.uid == ((GameObject) obj).uid;
    }
}
